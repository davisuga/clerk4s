/**
 * Clerk Backend API
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.davisuga.clerk4s.api

import com.davisuga.clerk4s.model.ClerkErrors
import com.davisuga.clerk4s.model.CreateRedirectURLRequest
import com.davisuga.clerk4s.model.DeletedObject
import com.davisuga.clerk4s.model.RedirectURL
import com.davisuga.clerk4s.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object RedirectURLsApi {

def apply(baseUrl: String = "https://api.clerk.com/v1") = new RedirectURLsApi(baseUrl)
}

class RedirectURLsApi(baseUrl: String) {

  /**
   * Create a redirect URL
   * 
   * Expected answers:
   *   code 200 : RedirectURL (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param createRedirectURLRequest 
   */
  def createRedirectURL(bearerToken: String)(createRedirectURLRequest: Option[CreateRedirectURLRequest] = None
): Request[Either[ResponseException[String, Exception], RedirectURL], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/redirect_urls")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(createRedirectURLRequest)
      .response(asJson[RedirectURL])

  /**
   * Remove the selected redirect URL from the whitelist of the instance
   * 
   * Expected answers:
   *   code 200 : DeletedObject (Deleted Object)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param id The ID of the redirect URL
   */
  def deleteRedirectURL(bearerToken: String)(id: String
): Request[Either[ResponseException[String, Exception], DeletedObject], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/redirect_urls/${id}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[DeletedObject])

  /**
   * Retrieve the details of the redirect URL with the given ID
   * 
   * Expected answers:
   *   code 200 : RedirectURL (Success)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param id The ID of the redirect URL
   */
  def getRedirectURL(bearerToken: String)(id: String
): Request[Either[ResponseException[String, Exception], RedirectURL], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/redirect_urls/${id}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[RedirectURL])

  /**
   * Lists all whitelisted redirect_urls for the instance
   * 
   * Expected answers:
   *   code 200 : Seq[RedirectURL] (List of Redirect URLs)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   */
  def listRedirectURLs(bearerToken: String)(
): Request[Either[ResponseException[String, Exception], Seq[RedirectURL]], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/redirect_urls")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[Seq[RedirectURL]])

}
