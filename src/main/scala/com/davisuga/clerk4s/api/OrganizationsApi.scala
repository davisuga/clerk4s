/**
 * Clerk Backend API
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.davisuga.clerk4s.api

import com.davisuga.clerk4s.model.ClerkErrors
import com.davisuga.clerk4s.model.CreateOrganizationRequest
import com.davisuga.clerk4s.model.DeletedObject
import java.io.File
import com.davisuga.clerk4s.model.MergeOrganizationMetadataRequest
import com.davisuga.clerk4s.model.Organization
import com.davisuga.clerk4s.model.OrganizationWithLogo
import com.davisuga.clerk4s.model.Organizations
import com.davisuga.clerk4s.model.UpdateOrganizationRequest
import com.davisuga.clerk4s.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object OrganizationsApi {

def apply(baseUrl: String = "https://api.clerk.com/v1") = new OrganizationsApi(baseUrl)
}

class OrganizationsApi(baseUrl: String) {

  /**
   * Creates a new organization with the given name for an instance. In order to successfully create an organization you need to provide the ID of the User who will become the organization administrator. You can specify an optional slug for the new organization. If provided, the organization slug can contain only lowercase alphanumeric characters (letters and digits) and the dash \"-\". Organization slugs must be unique for the instance. You can provide additional metadata for the organization and set any custom attribute you want. Organizations support private and public metadata. Private metadata can only be accessed from the Backend API. Public metadata can be accessed from the Backend API, and are read-only from the Frontend API.
   * 
   * Expected answers:
   *   code 200 : Organization (An organization)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 403 : ClerkErrors (Authorization invalid)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param createOrganizationRequest 
   */
  def createOrganization(bearerToken: String)(createOrganizationRequest: Option[CreateOrganizationRequest] = None
): Request[Either[ResponseException[String, Exception], Organization], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/organizations")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(createOrganizationRequest)
      .response(asJson[Organization])

  /**
   * Deletes the given organization. Please note that deleting an organization will also delete all memberships and invitations. This is not reversible.
   * 
   * Expected answers:
   *   code 200 : DeletedObject (Deleted Object)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param organizationId The ID of the organization to delete
   */
  def deleteOrganization(bearerToken: String)(organizationId: String
): Request[Either[ResponseException[String, Exception], DeletedObject], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/organizations/${organizationId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[DeletedObject])

  /**
   * Delete the organization's logo.
   * 
   * Expected answers:
   *   code 200 : Organization (An organization)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param organizationId The ID of the organization for which the logo will be deleted.
   */
  def deleteOrganizationLogo(bearerToken: String)(organizationId: String
): Request[Either[ResponseException[String, Exception], Organization], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/organizations/${organizationId}/logo")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[Organization])

  /**
   * Fetches the organization whose ID or slug matches the provided `id_or_slug` URL query parameter.
   * 
   * Expected answers:
   *   code 200 : Organization (An organization)
   *   code 403 : ClerkErrors (Authorization invalid)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param organizationId The ID or slug of the organization
   */
  def getOrganization(bearerToken: String)(organizationId: String
): Request[Either[ResponseException[String, Exception], Organization], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/organizations/${organizationId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[Organization])

  /**
   * This request returns the list of organizations for an instance. Results can be paginated using the optional `limit` and `offset` query parameters. The organizations are ordered by descending creation date. Most recent organizations will be returned first.
   * 
   * Expected answers:
   *   code 200 : Organizations (A list of organizations)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 403 : ClerkErrors (Authorization invalid)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param limit Applies a limit to the number of results returned. Can be used for paginating the results together with `offset`. Must be an integer greater than zero and less than 500. By default, if not supplied, a limit of 10 is used.
   * @param offset Skip the first `offset` results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with `limit`.
   * @param includeMembersCount Flag to denote whether the member counts of each organization should be included in the response or not.
   * @param query Returns organizations with ID, name, or slug that match the given query. Uses exact match for organization ID and partial match for name and slug.
   * @param orderBy Allows to return organizations in a particular order. At the moment, you can order the returned organizations either by their `name`, `created_at` or `members_count`. In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by. For example, if you want organizations to be returned in descending order according to their `created_at` property, you can use `-created_at`. If you don't use `+` or `-`, then `+` is implied. Defaults to `-created_at`.
   */
  def listOrganizations(bearerToken: String)(limit: Option[Double] = None, offset: Option[Double] = None, includeMembersCount: Option[Boolean] = None, query: Option[String] = None, orderBy: Option[String] = None
): Request[Either[ResponseException[String, Exception], Organizations], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/organizations?limit=${ limit }&offset=${ offset }&include_members_count=${ includeMembersCount }&query=${ query }&order_by=${ orderBy }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[Organizations])

  /**
   * Update organization metadata attributes by merging existing values with the provided parameters. Metadata values will be updated via a deep merge. Deep meaning that any nested JSON objects will be merged as well. You can remove metadata keys at any level by setting their value to `null`.
   * 
   * Expected answers:
   *   code 200 : Organization (An organization)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 401 : ClerkErrors (Authentication invalid)
   *   code 404 : ClerkErrors (Resource not found)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param organizationId The ID of the organization for which metadata will be merged or updated
   * @param mergeOrganizationMetadataRequest 
   */
  def mergeOrganizationMetadata(bearerToken: String)(organizationId: String, mergeOrganizationMetadataRequest: MergeOrganizationMetadataRequest
): Request[Either[ResponseException[String, Exception], Organization], Any] =
    basicRequest
      .method(Method.PATCH, uri"$baseUrl/organizations/${organizationId}/metadata")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(mergeOrganizationMetadataRequest)
      .response(asJson[Organization])

  /**
   * Updates an existing organization
   * 
   * Expected answers:
   *   code 200 : Organization (An organization)
   *   code 404 : ClerkErrors (Resource not found)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param organizationId The ID of the organization to update
   * @param updateOrganizationRequest 
   */
  def updateOrganization(bearerToken: String)(organizationId: String, updateOrganizationRequest: UpdateOrganizationRequest
): Request[Either[ResponseException[String, Exception], Organization], Any] =
    basicRequest
      .method(Method.PATCH, uri"$baseUrl/organizations/${organizationId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(updateOrganizationRequest)
      .response(asJson[Organization])

  /**
   * Set or replace an organization's logo, by uploading an image file. This endpoint uses the `multipart/form-data` request content type and accepts a file of image type. The file size cannot exceed 10MB. Only the following file content types are supported: `image/jpeg`, `image/png`, `image/gif`, `image/webp`, `image/x-icon`, `image/vnd.microsoft.icon`.
   * 
   * Expected answers:
   *   code 200 : OrganizationWithLogo (An organization with a logo URL.)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 403 : ClerkErrors (Authorization invalid)
   *   code 404 : ClerkErrors (Resource not found)
   *   code 413 : ClerkErrors (Request was not successful)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param organizationId The ID of the organization for which to upload a logo
   * @param uploaderUserId 
   * @param file 
   */
  def uploadOrganizationLogo(bearerToken: String)(organizationId: String, uploaderUserId: Option[String] = None, file: Option[File] = None
): Request[Either[ResponseException[String, Exception], OrganizationWithLogo], Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/organizations/${organizationId}/logo")
      .contentType("multipart/form-data")
      .auth.bearer(bearerToken)
      .multipartBody(Seq(
                uploaderUserId.map(multipart("uploader_user_id", _))
, 
                file.map(multipartFile("file", _))

      ).flatten)
      .response(asJson[OrganizationWithLogo])

}
