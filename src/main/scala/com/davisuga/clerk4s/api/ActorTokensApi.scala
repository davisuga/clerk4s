/**
 * Clerk Backend API
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.davisuga.clerk4s.api

import com.davisuga.clerk4s.model.ActorToken
import com.davisuga.clerk4s.model.ClerkErrors
import com.davisuga.clerk4s.model.CreateActorTokenRequest
import com.davisuga.clerk4s.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object ActorTokensApi {

def apply(baseUrl: String = "https://api.clerk.com/v1") = new ActorTokensApi(baseUrl)
}

class ActorTokensApi(baseUrl: String) {

  /**
   * Create an actor token that can be used to impersonate the given user. The `actor` parameter needs to include at least a \"sub\" key whose value is the ID of the actor (impersonating) user.
   * 
   * Expected answers:
   *   code 200 : ActorToken (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 402 : ClerkErrors (Payment required)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param createActorTokenRequest 
   */
  def createActorToken(bearerToken: String)(createActorTokenRequest: Option[CreateActorTokenRequest] = None
): Request[Either[ResponseException[String, Exception], ActorToken], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/actor_tokens")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(createActorTokenRequest)
      .response(asJson[ActorToken])

  /**
   * Revokes a pending actor token.
   * 
   * Expected answers:
   *   code 200 : ActorToken (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param actorTokenId The ID of the actor token to be revoked.
   */
  def revokeActorToken(bearerToken: String)(actorTokenId: String
): Request[Either[ResponseException[String, Exception], ActorToken], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/actor_tokens/${actorTokenId}/revoke")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[ActorToken])

}
