/**
 * Clerk Backend API
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.davisuga.clerk4s.api

import com.davisuga.clerk4s.model.ClerkErrors
import com.davisuga.clerk4s.model.CreateOAuthApplicationRequest
import com.davisuga.clerk4s.model.DeletedObject
import com.davisuga.clerk4s.model.OAuthApplication
import com.davisuga.clerk4s.model.OAuthApplicationWithSecret
import com.davisuga.clerk4s.model.OAuthApplications
import com.davisuga.clerk4s.model.UpdateOAuthApplicationRequest
import com.davisuga.clerk4s.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object OAuthApplicationsApi {

def apply(baseUrl: String = "https://api.clerk.com/v1") = new OAuthApplicationsApi(baseUrl)
}

class OAuthApplicationsApi(baseUrl: String) {

  /**
   * Creates a new OAuth application with the given name and callback URL for an instance. The callback URL must be a valid url. All URL schemes are allowed such as `http://`, `https://`, `myapp://`, etc...
   * 
   * Expected answers:
   *   code 200 : OAuthApplicationWithSecret (An OAuth application with client secret)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 403 : ClerkErrors (Authorization invalid)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param createOAuthApplicationRequest 
   */
  def createOAuthApplication(bearerToken: String)(createOAuthApplicationRequest: Option[CreateOAuthApplicationRequest] = None
): Request[Either[ResponseException[String, Exception], OAuthApplicationWithSecret], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/oauth_applications")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(createOAuthApplicationRequest)
      .response(asJson[OAuthApplicationWithSecret])

  /**
   * Deletes the given OAuth application. This is not reversible.
   * 
   * Expected answers:
   *   code 200 : DeletedObject (Deleted Object)
   *   code 403 : ClerkErrors (Authorization invalid)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param oauthApplicationId The ID of the OAuth application to delete
   */
  def deleteOAuthApplication(bearerToken: String)(oauthApplicationId: String
): Request[Either[ResponseException[String, Exception], DeletedObject], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/oauth_applications/${oauthApplicationId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[DeletedObject])

  /**
   * Fetches the OAuth application whose ID matches the provided `id` in the path.
   * 
   * Expected answers:
   *   code 200 : OAuthApplication (An OAuth application)
   *   code 403 : ClerkErrors (Authorization invalid)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param oauthApplicationId The ID of the OAuth application
   */
  def getOAuthApplication(bearerToken: String)(oauthApplicationId: String
): Request[Either[ResponseException[String, Exception], OAuthApplication], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/oauth_applications/${oauthApplicationId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[OAuthApplication])

  /**
   * This request returns the list of OAuth applications for an instance. Results can be paginated using the optional `limit` and `offset` query parameters. The OAuth applications are ordered by descending creation date. Most recent OAuth applications will be returned first.
   * 
   * Expected answers:
   *   code 200 : OAuthApplications (A list of OAuth applications)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 403 : ClerkErrors (Authorization invalid)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param limit Applies a limit to the number of results returned. Can be used for paginating the results together with `offset`. Must be an integer greater than zero and less than 500. By default, if not supplied, a limit of 10 is used.
   * @param offset Skip the first `offset` results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with `limit`.
   */
  def listOAuthApplications(bearerToken: String)(limit: Option[Double] = None, offset: Option[Double] = None
): Request[Either[ResponseException[String, Exception], OAuthApplications], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/oauth_applications?limit=${ limit }&offset=${ offset }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[OAuthApplications])

  /**
   * Rotates the OAuth application's client secret. When the client secret is rotated, make sure to update it in authorized OAuth clients.
   * 
   * Expected answers:
   *   code 200 : OAuthApplicationWithSecret (An OAuth application with client secret)
   *   code 403 : ClerkErrors (Authorization invalid)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param oauthApplicationId The ID of the OAuth application for which to rotate the client secret
   */
  def rotateOAuthApplicationSecret(bearerToken: String)(oauthApplicationId: String
): Request[Either[ResponseException[String, Exception], OAuthApplicationWithSecret], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/oauth_applications/${oauthApplicationId}/rotate_secret")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[OAuthApplicationWithSecret])

  /**
   * Updates an existing OAuth application
   * 
   * Expected answers:
   *   code 200 : OAuthApplication (An OAuth application)
   *   code 403 : ClerkErrors (Authorization invalid)
   *   code 404 : ClerkErrors (Resource not found)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param oauthApplicationId The ID of the OAuth application to update
   * @param updateOAuthApplicationRequest 
   */
  def updateOAuthApplication(bearerToken: String)(oauthApplicationId: String, updateOAuthApplicationRequest: UpdateOAuthApplicationRequest
): Request[Either[ResponseException[String, Exception], OAuthApplication], Any] =
    basicRequest
      .method(Method.PATCH, uri"$baseUrl/oauth_applications/${oauthApplicationId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(updateOAuthApplicationRequest)
      .response(asJson[OAuthApplication])

}
