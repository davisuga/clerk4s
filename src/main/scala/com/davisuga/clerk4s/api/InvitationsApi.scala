/**
 * Clerk Backend API
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.davisuga.clerk4s.api

import com.davisuga.clerk4s.model.ClerkErrors
import com.davisuga.clerk4s.model.CreateInvitationRequest
import com.davisuga.clerk4s.model.Invitation
import com.davisuga.clerk4s.model.RevokeInvitation200Response
import com.davisuga.clerk4s.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object InvitationsApi {

def apply(baseUrl: String = "https://api.clerk.com/v1") = new InvitationsApi(baseUrl)
}

class InvitationsApi(baseUrl: String) {

  /**
   * Creates a new invitation for the given email address and sends the invitation email. Keep in mind that you cannot create an invitation if there is already one for the given email address. Also, trying to create an invitation for an email address that already exists in your application will result to an error.
   * 
   * Expected answers:
   *   code 200 : Invitation (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param createInvitationRequest Required parameters
   */
  def createInvitation(bearerToken: String)(createInvitationRequest: Option[CreateInvitationRequest] = None
): Request[Either[ResponseException[String, Exception], Invitation], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/invitations")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(createInvitationRequest)
      .response(asJson[Invitation])

  /**
   * Returns all non-revoked invitations for your application, sorted by creation date
   * 
   * Expected answers:
   *   code 200 : Seq[Invitation] (List of invitations)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param status Filter invitations based on their status
   */
  def listInvitations(bearerToken: String)(status: Option[String] = None
): Request[Either[ResponseException[String, Exception], Seq[Invitation]], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/invitations?status=${ status }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[Seq[Invitation]])

  /**
   * Revokes the given invitation. Revoking an invitation will prevent the user from using the invitation link that was sent to them. However, it doesn't prevent the user from signing up if they follow the sign up flow. Only active (i.e. non-revoked) invitations can be revoked.
   * 
   * Expected answers:
   *   code 200 : RevokeInvitation200Response (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param invitationId The ID of the invitation to be revoked
   */
  def revokeInvitation(bearerToken: String)(invitationId: String
): Request[Either[ResponseException[String, Exception], RevokeInvitation200Response], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/invitations/${invitationId}/revoke")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[RevokeInvitation200Response])

}
