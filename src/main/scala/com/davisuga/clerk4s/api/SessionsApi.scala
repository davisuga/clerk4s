/**
 * Clerk Backend API
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.davisuga.clerk4s.api

import com.davisuga.clerk4s.model.ClerkErrors
import com.davisuga.clerk4s.model.CreateSessionTokenFromTemplate200Response
import com.davisuga.clerk4s.model.Session
import com.davisuga.clerk4s.model.VerifySessionRequest
import com.davisuga.clerk4s.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object SessionsApi {

def apply(baseUrl: String = "https://api.clerk.com/v1") = new SessionsApi(baseUrl)
}

class SessionsApi(baseUrl: String) {

  /**
   * Creates a JSON Web Token(JWT) based on a session and a JWT Template name defined for your instance
   * 
   * Expected answers:
   *   code 200 : CreateSessionTokenFromTemplate200Response (OK)
   *   code 401 : ClerkErrors (Authentication invalid)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param sessionId The ID of the session
   * @param templateName The name of the JWT Template defined in your instance (e.g. `custom_hasura`).
   */
  def createSessionTokenFromTemplate(bearerToken: String)(sessionId: String, templateName: String
): Request[Either[ResponseException[String, Exception], CreateSessionTokenFromTemplate200Response], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/sessions/${sessionId}/tokens/${templateName}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[CreateSessionTokenFromTemplate200Response])

  /**
   * Retrieve the details of a session
   * 
   * Expected answers:
   *   code 200 : Session (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 401 : ClerkErrors (Authentication invalid)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param sessionId The ID of the session
   */
  def getSession(bearerToken: String)(sessionId: String
): Request[Either[ResponseException[String, Exception], Session], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/sessions/${sessionId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[Session])

  /**
   * Returns a list of all sessions. The sessions are returned sorted by creation date, with the newest sessions appearing first.
   * 
   * Expected answers:
   *   code 200 : Seq[Session] (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 401 : ClerkErrors (Authentication invalid)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientId List sessions for the given client
   * @param userId List sessions for the given user
   * @param status Filter sessions by the provided status
   * @param limit Applies a limit to the number of results returned. Can be used for paginating the results together with `offset`. Must be an integer greater than zero and less than 500. By default, if not supplied, a limit of 10 is used.
   * @param offset Skip the first `offset` results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with `limit`.
   */
  def getSessionList(bearerToken: String)(clientId: Option[String] = None, userId: Option[String] = None, status: Option[String] = None, limit: Option[Double] = None, offset: Option[Double] = None
): Request[Either[ResponseException[String, Exception], Seq[Session]], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/sessions?client_id=${ clientId }&user_id=${ userId }&status=${ status }&limit=${ limit }&offset=${ offset }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[Seq[Session]])

  /**
   * Sets the status of a session as \"revoked\", which is an unauthenticated state. In multi-session mode, a revoked session will still be returned along with its client object, however the user will need to sign in again.
   * 
   * Expected answers:
   *   code 200 : Session (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 401 : ClerkErrors (Authentication invalid)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param sessionId The ID of the session
   */
  def revokeSession(bearerToken: String)(sessionId: String
): Request[Either[ResponseException[String, Exception], Session], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/sessions/${sessionId}/revoke")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[Session])

  /**
   * Returns the session if it is authenticated, otherwise returns an error.
   * 
   * Expected answers:
   *   code 200 : Session (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 401 : ClerkErrors (Authentication invalid)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param sessionId The ID of the session
   * @param verifySessionRequest Parameters.
   */
  def verifySession(bearerToken: String)(sessionId: String, verifySessionRequest: Option[VerifySessionRequest] = None
): Request[Either[ResponseException[String, Exception], Session], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/sessions/${sessionId}/verify")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(verifySessionRequest)
      .response(asJson[Session])

}
