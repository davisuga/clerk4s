/**
 * Clerk Backend API
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.davisuga.clerk4s.api

import com.davisuga.clerk4s.model.ClerkErrors
import com.davisuga.clerk4s.model.Client
import com.davisuga.clerk4s.model.Session
import com.davisuga.clerk4s.model.VerifyClientRequest
import com.davisuga.clerk4s.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object ClientsApi {

def apply(baseUrl: String = "https://api.clerk.com/v1") = new ClientsApi(baseUrl)
}

class ClientsApi(baseUrl: String) {

  /**
   * Returns the details of a client.
   * 
   * Expected answers:
   *   code 200 : Client (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 401 : ClerkErrors (Authentication invalid)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientId Client ID.
   */
  def getClient(bearerToken: String)(clientId: String
): Request[Either[ResponseException[String, Exception], Client], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/clients/${clientId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[Client])

  /**
   * Returns the details of the last active session of a client.
   * 
   * Expected answers:
   *   code 200 : Session (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 401 : ClerkErrors (Authentication invalid)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientId Client ID.
   */
  def getClientLastActiveSession(bearerToken: String)(clientId: String
): Request[Either[ResponseException[String, Exception], Session], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/clients/${clientId}/last_active_session")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[Session])

  /**
   * Returns a list of all clients. The clients are returned sorted by creation date, with the newest clients appearing first.
   * 
   * Expected answers:
   *   code 200 : Seq[Client] (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 401 : ClerkErrors (Authentication invalid)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param limit Applies a limit to the number of results returned. Can be used for paginating the results together with `offset`. Must be an integer greater than zero and less than 500. By default, if not supplied, a limit of 10 is used.
   * @param offset Skip the first `offset` results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with `limit`.
   */
  def getClientList(bearerToken: String)(limit: Option[Double] = None, offset: Option[Double] = None
): Request[Either[ResponseException[String, Exception], Seq[Client]], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/clients?limit=${ limit }&offset=${ offset }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[Seq[Client]])

  /**
   * Verifies the client in the provided token
   * 
   * Expected answers:
   *   code 200 : Client (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 401 : ClerkErrors (Authentication invalid)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param verifyClientRequest Parameters.
   */
  def verifyClient(bearerToken: String)(verifyClientRequest: Option[VerifyClientRequest] = None
): Request[Either[ResponseException[String, Exception], Client], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/clients/verify")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(verifyClientRequest)
      .response(asJson[Client])

}
