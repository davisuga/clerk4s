/**
 * Clerk Backend API
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.davisuga.clerk4s.api

import com.davisuga.clerk4s.model.AllowlistIdentifier
import com.davisuga.clerk4s.model.BlocklistIdentifier
import com.davisuga.clerk4s.model.BlocklistIdentifiers
import com.davisuga.clerk4s.model.ClerkErrors
import com.davisuga.clerk4s.model.CreateAllowlistIdentifierRequest
import com.davisuga.clerk4s.model.DeletedObject
import com.davisuga.clerk4s.model.ListBlocklistIdentifiersRequest
import com.davisuga.clerk4s.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object AllowListBlockListApi {

def apply(baseUrl: String = "https://api.clerk.com/v1") = new AllowListBlockListApi(baseUrl)
}

class AllowListBlockListApi(baseUrl: String) {

  /**
   * Create an identifier allowed to sign up to an instance
   * 
   * Expected answers:
   *   code 200 : AllowlistIdentifier (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 402 : ClerkErrors (Payment required)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param createAllowlistIdentifierRequest 
   */
  def createAllowlistIdentifier(bearerToken: String)(createAllowlistIdentifierRequest: Option[CreateAllowlistIdentifierRequest] = None
): Request[Either[ResponseException[String, Exception], AllowlistIdentifier], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/allowlist_identifiers")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(createAllowlistIdentifierRequest)
      .response(asJson[AllowlistIdentifier])

  /**
   * Create an identifier that is blocked from accessing an instance
   * 
   * Expected answers:
   *   code 200 : BlocklistIdentifier (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 402 : ClerkErrors (Payment required)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   */
  def createBlocklistIdentifier(bearerToken: String)(
): Request[Either[ResponseException[String, Exception], BlocklistIdentifier], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/blocklist_identifiers")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[BlocklistIdentifier])

  /**
   * Delete an identifier from the instance allow-list
   * 
   * Expected answers:
   *   code 200 : DeletedObject (Deleted Object)
   *   code 402 : ClerkErrors (Payment required)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param identifierId The ID of the identifier to delete from the allow-list
   */
  def deleteAllowlistIdentifier(bearerToken: String)(identifierId: String
): Request[Either[ResponseException[String, Exception], DeletedObject], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/allowlist_identifiers/${identifierId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[DeletedObject])

  /**
   * Delete an identifier from the instance block-list
   * 
   * Expected answers:
   *   code 200 : DeletedObject (Deleted Object)
   *   code 402 : ClerkErrors (Payment required)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param identifierId The ID of the identifier to delete from the block-list
   */
  def deleteBlocklistIdentifier(bearerToken: String)(identifierId: String
): Request[Either[ResponseException[String, Exception], DeletedObject], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/blocklist_identifiers/${identifierId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[DeletedObject])

  /**
   * Get a list of all identifiers allowed to sign up to an instance
   * 
   * Expected answers:
   *   code 200 : Seq[AllowlistIdentifier] (Success)
   *   code 401 : ClerkErrors (Authentication invalid)
   *   code 402 : ClerkErrors (Payment required)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   */
  def listAllowlistIdentifiers(bearerToken: String)(
): Request[Either[ResponseException[String, Exception], Seq[AllowlistIdentifier]], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/allowlist_identifiers")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[Seq[AllowlistIdentifier]])

  /**
   * Get a list of all identifiers which are not allowed to access an instance
   * 
   * Expected answers:
   *   code 200 : BlocklistIdentifiers (Success)
   *   code 401 : ClerkErrors (Authentication invalid)
   *   code 402 : ClerkErrors (Payment required)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param listBlocklistIdentifiersRequest 
   */
  def listBlocklistIdentifiers(bearerToken: String)(listBlocklistIdentifiersRequest: Option[ListBlocklistIdentifiersRequest] = None
): Request[Either[ResponseException[String, Exception], BlocklistIdentifiers], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/blocklist_identifiers")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(listBlocklistIdentifiersRequest)
      .response(asJson[BlocklistIdentifiers])

}
