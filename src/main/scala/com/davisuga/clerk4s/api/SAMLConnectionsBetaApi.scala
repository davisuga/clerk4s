/**
 * Clerk Backend API
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.davisuga.clerk4s.api

import com.davisuga.clerk4s.model.ClerkErrors
import com.davisuga.clerk4s.model.CreateSAMLConnectionRequest
import com.davisuga.clerk4s.model.DeletedObject
import com.davisuga.clerk4s.model.SAMLConnection
import com.davisuga.clerk4s.model.SAMLConnections
import com.davisuga.clerk4s.model.UpdateSAMLConnectionRequest
import com.davisuga.clerk4s.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object SAMLConnectionsBetaApi {

def apply(baseUrl: String = "https://api.clerk.com/v1") = new SAMLConnectionsBetaApi(baseUrl)
}

class SAMLConnectionsBetaApi(baseUrl: String) {

  /**
   * Creates a new SAML Connection. <br/><br/> Note: This is a <b>Private Beta</b> feature and it is currently <b>hidden behind a feature flag</b>. Reach out to us via Intercom to try it out.
   * 
   * Expected answers:
   *   code 200 : SAMLConnection (A SAML Connection)
   *   code 402 : ClerkErrors (Payment required)
   *   code 403 : ClerkErrors (Authorization invalid)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param createSAMLConnectionRequest 
   */
  def createSAMLConnection(bearerToken: String)(createSAMLConnectionRequest: Option[CreateSAMLConnectionRequest] = None
): Request[Either[ResponseException[String, Exception], SAMLConnection], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/saml_connections")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(createSAMLConnectionRequest)
      .response(asJson[SAMLConnection])

  /**
   * Deletes the given SAML Connection. <br/><br/> Note: This is a <b>Private Beta</b> feature and it is currently <b>hidden behind a feature flag</b>. Reach out to us via Intercom to try it out.
   * 
   * Expected answers:
   *   code 200 : DeletedObject (Deleted Object)
   *   code 402 : ClerkErrors (Payment required)
   *   code 403 : ClerkErrors (Authorization invalid)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param samlConnectionId The ID of the SAML Connection to delete
   */
  def deleteSAMLConnection(bearerToken: String)(samlConnectionId: String
): Request[Either[ResponseException[String, Exception], DeletedObject], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/saml_connections/${samlConnectionId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[DeletedObject])

  /**
   * Fetches the SAML Connection whose ID matches the provided `id` in the path. <br/><br/> Note: This is a <b>Private Beta</b> feature and it is currently <b>hidden behind a feature flag</b>. Reach out to us via Intercom to try it out.
   * 
   * Expected answers:
   *   code 200 : SAMLConnection (A SAML Connection)
   *   code 402 : ClerkErrors (Payment required)
   *   code 403 : ClerkErrors (Authorization invalid)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param samlConnectionId The ID of the SAML Connection
   */
  def getSAMLConnection(bearerToken: String)(samlConnectionId: String
): Request[Either[ResponseException[String, Exception], SAMLConnection], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/saml_connections/${samlConnectionId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[SAMLConnection])

  /**
   * This request returns the list of SAML Connections for an instance. Results can be paginated using the optional `limit` and `offset` query parameters. The SAML Connections are ordered by descending creation date and the most recent will be returned first. <br/><br/> Note: This is a <b>Private Beta</b> feature and it is currently <b>hidden behind a feature flag</b>. Reach out to us via Intercom to try it out.
   * 
   * Expected answers:
   *   code 200 : SAMLConnections (A list of SAML Connections)
   *   code 402 : ClerkErrors (Payment required)
   *   code 403 : ClerkErrors (Authorization invalid)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param limit Applies a limit to the number of results returned. Can be used for paginating the results together with `offset`. Must be an integer greater than zero and less than 500. By default, if not supplied, a limit of 10 is used.
   * @param offset Skip the first `offset` results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with `limit`.
   */
  def listSAMLConnections(bearerToken: String)(limit: Option[Double] = None, offset: Option[Double] = None
): Request[Either[ResponseException[String, Exception], SAMLConnections], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/saml_connections?limit=${ limit }&offset=${ offset }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[SAMLConnections])

  /**
   * Updates an existing SAML Connection <br/><br/> Note: This is a <b>Private Beta</b> feature and it is currently <b>hidden behind a feature flag</b>. Reach out to us via Intercom to try it out.
   * 
   * Expected answers:
   *   code 200 : SAMLConnection (A SAML Connection)
   *   code 402 : ClerkErrors (Payment required)
   *   code 403 : ClerkErrors (Authorization invalid)
   *   code 404 : ClerkErrors (Resource not found)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param samlConnectionId The ID of the SAML Connection to update
   * @param updateSAMLConnectionRequest 
   */
  def updateSAMLConnection(bearerToken: String)(samlConnectionId: String, updateSAMLConnectionRequest: UpdateSAMLConnectionRequest
): Request[Either[ResponseException[String, Exception], SAMLConnection], Any] =
    basicRequest
      .method(Method.PATCH, uri"$baseUrl/saml_connections/${samlConnectionId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(updateSAMLConnectionRequest)
      .response(asJson[SAMLConnection])

}
