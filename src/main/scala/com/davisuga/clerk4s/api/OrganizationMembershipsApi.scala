/**
 * Clerk Backend API
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.davisuga.clerk4s.api

import com.davisuga.clerk4s.model.ClerkErrors
import com.davisuga.clerk4s.model.CreateOrganizationMembershipRequest
import com.davisuga.clerk4s.model.OrganizationMembership
import com.davisuga.clerk4s.model.OrganizationMemberships
import com.davisuga.clerk4s.model.UpdateOrganizationMembershipMetadataRequest
import com.davisuga.clerk4s.model.UpdateOrganizationMembershipRequest
import com.davisuga.clerk4s.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object OrganizationMembershipsApi {

def apply(baseUrl: String = "https://api.clerk.com/v1") = new OrganizationMembershipsApi(baseUrl)
}

class OrganizationMembershipsApi(baseUrl: String) {

  /**
   * Adds a user as a member to the given organization. Only users in the same instance as the organization can be added as members.
   * 
   * Expected answers:
   *   code 200 : OrganizationMembership (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 403 : ClerkErrors (Authorization invalid)
   *   code 404 : ClerkErrors (Resource not found)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param organizationId The ID of the organization where the new membership will be created
   * @param createOrganizationMembershipRequest 
   */
  def createOrganizationMembership(bearerToken: String)(organizationId: String, createOrganizationMembershipRequest: CreateOrganizationMembershipRequest
): Request[Either[ResponseException[String, Exception], OrganizationMembership], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/organizations/${organizationId}/memberships")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(createOrganizationMembershipRequest)
      .response(asJson[OrganizationMembership])

  /**
   * Removes the given membership from the organization
   * 
   * Expected answers:
   *   code 200 : OrganizationMembership (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 401 : ClerkErrors (Authentication invalid)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param organizationId The ID of the organization the membership belongs to
   * @param userId The ID of the user that this membership belongs to
   */
  def deleteOrganizationMembership(bearerToken: String)(organizationId: String, userId: String
): Request[Either[ResponseException[String, Exception], OrganizationMembership], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/organizations/${organizationId}/memberships/${userId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[OrganizationMembership])

  /**
   * Retrieves all user memberships for the given organization
   * 
   * Expected answers:
   *   code 200 : OrganizationMemberships (A list of organization memberships)
   *   code 401 : ClerkErrors (Authentication invalid)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param organizationId The organization ID.
   * @param limit Applies a limit to the number of results returned. Can be used for paginating the results together with `offset`. Must be an integer greater than zero and less than 500. By default, if not supplied, a limit of 10 is used.
   * @param offset Skip the first `offset` results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with `limit`.
   * @param orderBy Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username. By prepending one of those values with + or -, we can choose to sort in ascending (ASC) or descending (DESC) order.\"
   */
  def listOrganizationMemberships(bearerToken: String)(organizationId: String, limit: Option[Double] = None, offset: Option[Double] = None, orderBy: Option[String] = None
): Request[Either[ResponseException[String, Exception], OrganizationMemberships], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/organizations/${organizationId}/memberships?limit=${ limit }&offset=${ offset }&order_by=${ orderBy }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[OrganizationMemberships])

  /**
   * Updates the properties of an existing organization membership
   * 
   * Expected answers:
   *   code 200 : OrganizationMembership (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 404 : ClerkErrors (Resource not found)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param organizationId The ID of the organization the membership belongs to
   * @param userId The ID of the user that this membership belongs to
   * @param updateOrganizationMembershipRequest 
   */
  def updateOrganizationMembership(bearerToken: String)(organizationId: String, userId: String, updateOrganizationMembershipRequest: UpdateOrganizationMembershipRequest
): Request[Either[ResponseException[String, Exception], OrganizationMembership], Any] =
    basicRequest
      .method(Method.PATCH, uri"$baseUrl/organizations/${organizationId}/memberships/${userId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(updateOrganizationMembershipRequest)
      .response(asJson[OrganizationMembership])

  /**
   * Update an organization membership's metadata attributes by merging existing values with the provided parameters. Metadata values will be updated via a deep merge. Deep means that any nested JSON objects will be merged as well. You can remove metadata keys at any level by setting their value to `null`.
   * 
   * Expected answers:
   *   code 200 : OrganizationMembership (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 404 : ClerkErrors (Resource not found)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param organizationId The ID of the organization the membership belongs to
   * @param userId The ID of the user that this membership belongs to
   * @param updateOrganizationMembershipMetadataRequest 
   */
  def updateOrganizationMembershipMetadata(bearerToken: String)(organizationId: String, userId: String, updateOrganizationMembershipMetadataRequest: UpdateOrganizationMembershipMetadataRequest
): Request[Either[ResponseException[String, Exception], OrganizationMembership], Any] =
    basicRequest
      .method(Method.PATCH, uri"$baseUrl/organizations/${organizationId}/memberships/${userId}/metadata")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(updateOrganizationMembershipMetadataRequest)
      .response(asJson[OrganizationMembership])

}
