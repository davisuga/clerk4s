/**
 * Clerk Backend API
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.davisuga.clerk4s.api

import com.davisuga.clerk4s.model.ClerkErrors
import com.davisuga.clerk4s.model.PreviewTemplateRequest
import com.davisuga.clerk4s.model.Template
import com.davisuga.clerk4s.model.UpsertTemplateRequest
import com.davisuga.clerk4s.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object EmailSMSTemplatesApi {

def apply(baseUrl: String = "https://api.clerk.com/v1") = new EmailSMSTemplatesApi(baseUrl)
}

class EmailSMSTemplatesApi(baseUrl: String) {

  /**
   * Returns the details of a template
   * 
   * Expected answers:
   *   code 200 : Template (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 401 : ClerkErrors (Authentication invalid)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param templateType The type of templates to retrieve (email or SMS)
   * @param slug The slug (i.e. machine-friendly name) of the template to retrieve
   */
  def getTemplate(bearerToken: String)(templateType: String, slug: String
): Request[Either[ResponseException[String, Exception], Template], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/templates/${templateType}/${slug}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[Template])

  /**
   * Returns a list of all templates. The templates are returned sorted by position.
   * 
   * Expected answers:
   *   code 200 : Seq[Template] (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 401 : ClerkErrors (Authentication invalid)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param templateType The type of templates to list (email or SMS)
   */
  def getTemplateList(bearerToken: String)(templateType: String
): Request[Either[ResponseException[String, Exception], Seq[Template]], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/templates/${templateType}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[Seq[Template]])

  /**
   * Returns a preview of a template for a given template_type, slug and body
   * 
   * Expected answers:
   *   code 200 : Any (OK)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 401 : ClerkErrors (Authentication invalid)
   *   code 404 : ClerkErrors (Resource not found)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param templateType The type of template to preview
   * @param slug The slug of the template to preview
   * @param previewTemplateRequest Required parameters
   */
  def previewTemplate(bearerToken: String)(templateType: String, slug: String, previewTemplateRequest: Option[PreviewTemplateRequest] = None
): Request[Either[ResponseException[String, Exception], Any], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/templates/${templateType}/${slug}/preview")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(previewTemplateRequest)
      .response(asJson[Any])

  /**
   * Reverts an updated template to its default state
   * 
   * Expected answers:
   *   code 200 : Template (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 401 : ClerkErrors (Authentication invalid)
   *   code 402 : ClerkErrors (Payment required)
   *   code 404 : ClerkErrors (Resource not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param templateType The type of template to revert
   * @param slug The slug of the template to revert
   */
  def revertTemplate(bearerToken: String)(templateType: String, slug: String
): Request[Either[ResponseException[String, Exception], Template], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/templates/${templateType}/${slug}/revert")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[Template])

  /**
   * Updates the existing template of the given type and slug
   * 
   * Expected answers:
   *   code 200 : Template (Success)
   *   code 400 : ClerkErrors (Request was not successful)
   *   code 401 : ClerkErrors (Authentication invalid)
   *   code 402 : ClerkErrors (Payment required)
   *   code 404 : ClerkErrors (Resource not found)
   *   code 422 : ClerkErrors (Invalid request parameters)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param templateType The type of template to update
   * @param slug The slug of the template to update
   * @param upsertTemplateRequest 
   */
  def upsertTemplate(bearerToken: String)(templateType: String, slug: String, upsertTemplateRequest: Option[UpsertTemplateRequest] = None
): Request[Either[ResponseException[String, Exception], Template], Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/templates/${templateType}/${slug}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(upsertTemplateRequest)
      .response(asJson[Template])

}
